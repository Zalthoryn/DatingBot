import io
import json
import pika
import logging
import asyncpg
from config import TelegramSettings, MinIOSettings, PostgresSettings, RabbitMQSettings # –Ω—É–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ config.py –∏ .env
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import BufferedInputFile, InputMediaPhoto
from minio import Minio
from minio.error import S3Error
from keyboards import main_menu_keyboard, edit_profile_keyboard, remove_keyboard  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
telegram_settings = TelegramSettings()
minio_settings = MinIOSettings()
postgres_settings = PostgresSettings()
rabbitmq_settings = RabbitMQSettings()

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("telegram_bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

bot = Bot(token=telegram_settings.bot_token)
dp = Dispatcher()

pool = None
user_state = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MinIO –∫–ª–∏–µ–Ω—Ç–∞
minio_client = Minio(
    "minio:9000",
    access_key=minio_settings.minio_root_user,
    secret_key=minio_settings.minio_root_password,
    secure=False
)

if not minio_client:
    logger.error("MinIO client initialization failed: MINIO_ROOT_USER or MINIO_ROOT_PASSWORD not set")
    raise ValueError("MinIO credentials not provided")

# –°–æ–∑–¥–∞—ë–º –∫–æ—Ä–∑–∏–Ω—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
bucket_name = "photos"
try:
    if not minio_client.bucket_exists(bucket_name):
        minio_client.make_bucket(bucket_name)
        logger.info(f"Bucket {bucket_name} created")
except S3Error as e:
    logger.error(f"Error creating bucket: {str(e)}")

async def init_db():
    return await asyncpg.create_pool(
        user=postgres_settings.postgres_user,
        password=postgres_settings.postgres_password,
        database=postgres_settings.postgres_db,
        host=postgres_settings.postgres_host
    )

def get_rabbitmq_connection():
    credentials = pika.PlainCredentials(rabbitmq_settings.rabbitmq_user, rabbitmq_settings.rabbitmq_password)
    return pika.BlockingConnection(pika.ConnectionParameters(
        host=rabbitmq_settings.rabbitmq_host,
        credentials=credentials
    ))

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    async with pool.acquire() as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = await conn.fetchrow("SELECT * FROM Users WHERE telegram_id = $1", user_id)
        if not user:
            await conn.execute(
                "INSERT INTO Users (telegram_id, username) VALUES ($1, $2)",
                user_id, message.from_user.username
            )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=main_menu_keyboard
    )

@dp.message(lambda message: message.text == "–ü–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç üîç")
async def handle_find_button(message: types.Message):
    await cmd_find(message)

@dp.message(lambda message: message.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üìù")
async def handle_view_button(message: types.Message):
    await cmd_view(message)

@dp.message(lambda message: message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚úèÔ∏è")
async def handle_profile_button(message: types.Message):
    await cmd_profile(message)

@dp.message(Command("profile"))
async def cmd_profile(message: types.Message):
    user_id = message.from_user.id
    async with pool.acquire() as conn:
        user = await conn.fetchrow("SELECT * FROM Users WHERE telegram_id = $1", user_id)
        if not user:
            await conn.execute(
                "INSERT INTO Users (telegram_id, username) VALUES ($1, $2)",
                user_id, message.from_user.username
            )
            user = await conn.fetchrow("SELECT * FROM Users WHERE telegram_id = $1", user_id)

        profile = await conn.fetchrow("SELECT * FROM Profiles WHERE user_id = $1", user['id'])
        if not profile:
            await message.answer("–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å! –í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=remove_keyboard)
            user_state[user_id] = {"step": "age", "user_db_id": user['id']}
        else:
            await message.answer("–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=edit_profile_keyboard)
            user_state[user_id] = {"step": "profile_menu", "user_db_id": user['id']}

@dp.message(lambda message: user_state.get(message.from_user.id, {}).get("step") == "profile_menu")
async def process_profile_menu(message: types.Message):
    user_id = message.from_user.id
    choice = message.text.lower()
    if choice == "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚úèÔ∏è":
        await message.answer("–î–∞–≤–∞–π –æ–±–Ω–æ–≤–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å! –í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=remove_keyboard)
        user_state[user_id] = {"step": "age", "user_db_id": user_state[user_id]["user_db_id"]}
    elif choice == "–Ω–∞–∑–∞–¥ ‚¨ÖÔ∏è":
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
        del user_state[user_id]
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚úèÔ∏è' –∏–ª–∏ '–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è'.")

@dp.message(lambda message: user_state.get(message.from_user.id, {}).get("step") == "age")
async def process_age(message: types.Message):
    user_id = message.from_user.id
    user_db_id = user_state[user_id]["user_db_id"]
    try:
        age = int(message.text)
        user_state[user_id]["age"] = age
        await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª (–º/–∂):")
        user_state[user_id]["step"] = "gender"
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞!")

@dp.message(lambda message: user_state.get(message.from_user.id, {}).get("step") == "gender")
async def process_gender(message: types.Message):
    user_id = message.from_user.id
    gender = message.text.lower()
    if gender in ["–º", "–∂"]:
        user_state[user_id]["gender"] = gender
        await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
        user_state[user_id]["step"] = "interests"
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –ø–æ–ª –∫–∞–∫ '–º' –∏–ª–∏ '–∂'!")

@dp.message(lambda message: user_state.get(message.from_user.id, {}).get("step") == "interests")
async def process_interests(message: types.Message):
    user_id = message.from_user.id
    interests = message.text
    user_state[user_id]["interests"] = interests
    await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥:")
    user_state[user_id]["step"] = "city"

@dp.message(lambda message: user_state.get(message.from_user.id, {}).get("step") == "city")
async def process_city(message: types.Message):
    user_id = message.from_user.id
    user_db_id = user_state[user_id]["user_db_id"]
    city = message.text
    async with pool.acquire() as conn:
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ñ–∏–ª—å
        profile = await conn.fetchrow("SELECT * FROM Profiles WHERE user_id = $1", user_db_id)
        if profile:
            await conn.execute(
                """
                UPDATE Profiles
                SET age = $1, gender = $2, interests = $3, city = $4
                WHERE user_id = $5
                """,
                user_state[user_id]["age"], user_state[user_id]["gender"],
                user_state[user_id]["interests"], city, user_db_id
            )
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω! –ò—Å–ø–æ–ª—å–∑—É–π /addphoto –¥–ª—è —Ñ–æ—Ç–æ –∏–ª–∏ /find –¥–ª—è –ø–æ–∏—Å–∫–∞.", reply_markup=main_menu_keyboard)
        else:
            await conn.execute(
                """
                INSERT INTO Profiles (user_id, age, gender, interests, city, profile_completeness)
                VALUES ($1, $2, $3, $4, $5, $6)
                """,
                user_db_id, user_state[user_id]["age"], user_state[user_id]["gender"],
                user_state[user_id]["interests"], city, 80
            )
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ Ratings
            profile = await conn.fetchrow("SELECT * FROM Profiles WHERE user_id = $1", user_db_id)
            await conn.execute(
                "INSERT INTO Ratings (profile_id) VALUES ($1)", profile['id']
            )
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π /addphoto –¥–ª—è —Ñ–æ—Ç–æ –∏–ª–∏ /find –¥–ª—è –ø–æ–∏—Å–∫–∞.", reply_markup=main_menu_keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å matchmaking
        connection = get_rabbitmq_connection()
        channel = connection.channel()
        channel.queue_declare(queue="matchmaking")
        channel.basic_publish(
            exchange="",
            routing_key="matchmaking",
            body=json.dumps({"user_id": user_id})
        )
        connection.close()
        logger.info(f"Sent matchmaking message for user {user_id}")

    del user_state[user_id]

@dp.message(Command("addphoto"))
async def cmd_add_photo(message: types.Message):
    user_id = message.from_user.id
    async with pool.acquire() as conn:
        user = await conn.fetchrow("SELECT * FROM Users WHERE telegram_id = $1", user_id)
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /profile!")
            return
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:")
    user_state[user_id] = {"step": "add_photo", "user_db_id": user['id']}

@dp.callback_query(lambda c: c.data == "finish_editing")
async def finish_editing(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in user_state:
        await callback_query.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.")
        return

    await callback_query.message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", reply_markup=main_menu_keyboard)
    del user_state[user_id]
    await callback_query.answer()

@dp.message(lambda message: user_state.get(message.from_user.id, {}).get("step") == "add_photo")
async def process_photo(message: types.Message):
    user_id = message.from_user.id
    user_db_id = user_state[user_id]["user_db_id"]
    if message.photo:
        file_id = message.photo[-1].file_id
        file_info = await bot.get_file(file_id)
        file_path = file_info.file_path

        file = await bot.download_file(file_path)
        file_bytes = file.read()

        object_key = f"user{user_db_id}/photo-{file_info.file_unique_id}.jpg"
        try:
            minio_client.put_object(
                bucket_name,
                object_key,
                io.BytesIO(file_bytes),
                length=len(file_bytes),
                content_type="image/jpeg"
            )
            logger.info(f"Photo uploaded to MinIO: {object_key}")
        except S3Error as e:
            logger.error(f"Error uploading photo to MinIO: {str(e)}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!")
            user_state[user_id]["step"] = "manage_photos"
            await manage_photos(message)
            return

        async with pool.acquire() as conn:
            await conn.execute(
                "INSERT INTO Photos (user_id, object_key) VALUES ($1, $2)", user_db_id, object_key
            )
            # –û–±–Ω–æ–≤–ª—è–µ–º profile_completeness
            await conn.execute(
                """
                UPDATE Profiles
                SET profile_completeness = LEAST(100, profile_completeness + 10)
                WHERE user_id = $1
                """,
                user_db_id
            )
        await message.answer("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ!")

    user_state[user_id]["step"] = "manage_photos"
    await manage_photos(message)

@dp.message(Command("view"))
async def cmd_view(message: types.Message):
    user_id = message.from_user.id
    async with pool.acquire() as conn:
        user = await conn.fetchrow("SELECT * FROM Users WHERE telegram_id = $1", user_id)
        if not user:
            await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è! –°–æ–∑–¥–∞–π –µ–≥–æ —Å –ø–æ–º–æ—â—å—é /profile.")
            return
        profile = await conn.fetchrow("SELECT * FROM Profiles WHERE user_id = $1", user['id'])
        if profile:
            profile_text = (
                f"–ù–∏–∫: {profile['nickname']}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {profile['age']}\n"
                f"–ü–æ–ª: {profile['gender']}\n"
                f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {profile['interests']}\n"
                f"–ì–æ—Ä–æ–¥: {profile['city']}\n"
                f"–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è: {profile['profile_completeness']}%"
            )

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ —Ç—Ä—ë—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            photos = await conn.fetch(
                "SELECT object_key FROM Photos WHERE user_id = $1 ORDER BY uploaded_at DESC LIMIT 3",
                user['id']
            )

            if photos:
                try:
                    # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    media = []
                    for photo in photos:
                        response = minio_client.get_object(bucket_name, photo['object_key'])
                        photo_data = response.read()
                        response.close()
                        response.release_conn()
                        photo_file = BufferedInputFile(
                            file=photo_data,
                            filename="profile_photo.jpg"
                        )
                        media.append(InputMediaPhoto(media=photo_file))
                    await message.answer_media_group(media=media)
                    await message.answer(profile_text, reply_markup=main_menu_keyboard)
                except S3Error as e:
                    logger.error(f"Error retrieving photo from MinIO: {str(e)}")
                    await message.answer(profile_text, reply_markup=main_menu_keyboard)
            else:
                await message.answer(profile_text, reply_markup=main_menu_keyboard)
        else:
            await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è! –°–æ–∑–¥–∞–π –µ–≥–æ —Å –ø–æ–º–æ—â—å—é /profile.", reply_markup=main_menu_keyboard)

@dp.message(Command("find"))
async def cmd_find(message: types.Message):
    user_id = message.from_user.id
    async with pool.acquire() as conn:
        user = await conn.fetchrow("SELECT * FROM Users WHERE telegram_id = $1", user_id)
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /profile!", reply_markup=main_menu_keyboard)
            return
        profile = await conn.fetchrow("SELECT * FROM Profiles WHERE user_id = $1", user['id'])
        if not profile or profile['profile_completeness'] < 80:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å –ø–æ–º–æ—â—å—é /profile –∏ –¥–æ–±–∞–≤—å —Ñ–æ—Ç–æ!", reply_markup=main_menu_keyboard)
            return

        # –ò—â–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        candidate = await conn.fetchrow(
            """
            SELECT u.telegram_id, p.id as profile_id, p.nickname, p.age, p.gender, p.interests, p.city
            FROM Profiles p
            JOIN Users u ON p.user_id = u.id
            WHERE u.id != $1
            AND p.gender != $2
            AND p.city = $3
            AND NOT EXISTS (
                SELECT 1 FROM Matches m
                WHERE (m.profile1_id = $4 AND m.profile2_id = p.id)
                OR (m.profile1_id = p.id AND m.profile2_id = $4)
            )
            AND NOT EXISTS (
                SELECT 1 FROM Interactions i
                WHERE i.from_profile_id = $4 AND i.to_profile_id = p.id AND i.action = 'skip'
            )
            LIMIT 1
            """,
            user['id'], profile['gender'], profile['city'], profile['id']
        )

        if not candidate:
            await message.answer("–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!", reply_markup=main_menu_keyboard)
            return

        # –ü–æ–ª—É—á–∞–µ–º 1-3 —Ñ–æ—Ç–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        photos = await conn.fetch(
            "SELECT object_key FROM Photos WHERE user_id = (SELECT id FROM Users WHERE telegram_id = $1) ORDER BY uploaded_at DESC LIMIT 3",
            candidate['telegram_id']
        )

        candidate_text = (
            f"–ù–∏–∫: {candidate['nickname']}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {candidate['age']}\n"
            f"–ü–æ–ª: {candidate['gender']}\n"
            f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {candidate['interests']}\n"
            f"–ì–æ—Ä–æ–¥: {candidate['city']}\n"
            f"\n–°–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –º—ç—Ç—á? –û—Ç–≤–µ—Ç—å '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'."
        )

        if photos:
            try:
                # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                media = []
                for photo in photos:
                    response = minio_client.get_object(bucket_name, photo['object_key'])
                    photo_data = response.read()
                    response.close()
                    response.release_conn()
                    photo_file = BufferedInputFile(
                        file=photo_data,
                        filename="profile_photo.jpg"
                    )
                    media.append(InputMediaPhoto(media=photo_file))
                await message.answer_media_group(media=media)
                await message.answer(candidate_text, reply_markup=main_menu_keyboard)
            except S3Error as e:
                logger.error(f"Error retrieving photo from MinIO: {str(e)}")
                await message.answer(candidate_text, reply_markup=main_menu_keyboard)
        else:
            await message.answer(candidate_text, reply_markup=main_menu_keyboard)

        user_state[user_id] = {
            "step": "match_response",
            "candidate_profile_id": candidate['profile_id'],
            "from_profile_id": profile['id']
        }

@dp.message(lambda message: user_state.get(message.from_user.id, {}).get("step") == "match_response")
async def process_match_response(message: types.Message):
    user_id = message.from_user.id
    response = message.text.lower()
    candidate_profile_id = user_state[user_id]["candidate_profile_id"]
    from_profile_id = user_state[user_id]["from_profile_id"]

    async with pool.acquire() as conn:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
        action = "like" if response == "–¥–∞" else "skip"
        await conn.execute(
            """
            INSERT INTO Interactions (from_profile_id, to_profile_id, action)
            VALUES ($1, $2, $3)
            """,
            from_profile_id, candidate_profile_id, action
        )

        if response == "–¥–∞":
            mutual_like = await conn.fetchrow(
                """
                SELECT 1 FROM Interactions
                WHERE from_profile_id = $1 AND to_profile_id = $2 AND action = 'like'
                """,
                candidate_profile_id, from_profile_id
            )
            if mutual_like:
                # –°–æ–∑–¥–∞—ë–º –º—ç—Ç—á
                await conn.execute(
                    "INSERT INTO Matches (profile1_id, profile2_id) VALUES ($1, $2)",
                    from_profile_id, candidate_profile_id
                )

                connection = get_rabbitmq_connection()
                channel = connection.channel()
                channel.queue_declare(queue="notifications")
                user1 = await conn.fetchrow(
                    """
                    SELECT u.telegram_id, p.nickname, p.age, p.gender, p.interests, p.city
                    FROM Users u 
                    JOIN Profiles p ON u.id = p.user_id 
                    WHERE p.id = $1
                    """,
                    from_profile_id
                )
                user2 = await conn.fetchrow(
                    """
                    SELECT u.telegram_id, p.nickname, p.age, p.gender, p.interests, p.city
                    FROM Users u 
                    JOIN Profiles p ON u.id = p.user_id 
                    WHERE p.id = $1
                    """,
                    candidate_profile_id
                )

                if not user1 or not user2:
                    logger.error(f"User data not found: user1={user1}, user2={user2}")
                    await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º—ç—Ç—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=main_menu_keyboard)
                    connection.close()
                    del user_state[user_id]
                    return

                # –ü–æ–ª—É—á–∞–µ–º –¥–æ —Ç—Ä—ë—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user1_photos = await conn.fetch(
                    "SELECT object_key FROM Photos WHERE user_id = (SELECT id FROM Users WHERE telegram_id = $1) ORDER BY uploaded_at DESC LIMIT 3",
                    user1['telegram_id']
                )
                user2_photos = await conn.fetch(
                    "SELECT object_key FROM Photos WHERE user_id = (SELECT id FROM Users WHERE telegram_id = $1) ORDER BY uploaded_at DESC LIMIT 3",
                    user2['telegram_id']
                )

                user1_object_keys = [photo['object_key'] for photo in user1_photos] if user1_photos else []
                user2_object_keys = [photo['object_key'] for photo in user2_photos] if user2_photos else []

                # –ü–µ—Ä–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –≤—Ç–æ—Ä–æ–≥–æ
                channel.basic_publish(
                    exchange="",
                    routing_key="notifications",
                    body=json.dumps({
                        "user_info": {
                            "to_user_id": user1['telegram_id'],
                            "nickname": user2['nickname'],
                            "age": user2['age'],  
                            "gender": user2['gender'],
                            "interests": user2['interests'],
                            "city": user2['city']
                        },
                        "object_keys": user2_object_keys
                    })
                )
                # –í—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –ø–µ—Ä–≤–æ–≥–æ
                channel.basic_publish(
                    exchange="",
                    routing_key="notifications",
                    body=json.dumps({
                        "user_info": {
                            "to_user_id": user2['telegram_id'],
                            "nickname": user1['nickname'],
                            "age": user1['age'],
                            "gender": user1['gender'],
                            "interests": user1['interests'],
                            "city": user1['city']
                        },
                        "object_keys": user1_object_keys
                    })
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å matchmaking –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                channel.queue_declare(queue="matchmaking")
                channel.basic_publish(
                    exchange="",
                    routing_key="matchmaking",
                    body=json.dumps({"user_id": user1['telegram_id']})
                )
                channel.basic_publish(
                    exchange="",
                    routing_key="matchmaking",
                    body=json.dumps({"user_id": user2['telegram_id']})
                )
                logger.info(f"Sent matchmaking messages for users {user1['telegram_id']} and {user2['telegram_id']}")

                connection.close()

                await message.answer("–ú—ç—Ç—á —Å–æ–∑–¥–∞–Ω! –û–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.", reply_markup=main_menu_keyboard)
            else:
                await message.answer("–¢—ã –ª–∞–π–∫–Ω—É–ª —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û–∂–∏–¥–∞–π, –ø–æ–∫–∞ –æ–Ω —Ç–æ–∂–µ —Ç–µ–±—è –ª–∞–π–∫–Ω–µ—Ç!", reply_markup=main_menu_keyboard)
        elif response == "–Ω–µ—Ç":
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /find –¥–ª—è –ø–æ–∏—Å–∫–∞.", reply_markup=main_menu_keyboard)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'!", reply_markup=main_menu_keyboard)
            return

    del user_state[user_id]

async def on_startup():
    global pool
    pool = await init_db()
    logger.info("Bot started with database connection")

if __name__ == "__main__":
    dp.startup.register(on_startup)
    dp.run_polling(bot)